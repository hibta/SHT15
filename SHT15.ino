#include <SHT1X.h>
#include "IRremote.h"
IRsend irsend;  //IRsendオブジェクトの生成

unsigned long TIME = 0;  // Arduinoが起動してからの時間保存用
int KHZ = 38; // 信号の周波数は38[kHz]
int COUNT = 0;  // エアコンが切れたかどうかの判定用

// 気温保存用
float tempC = 0;
float tempC_old = 0;

//Create an instance of the SHT1X sensor
SHT1x sht15(A4, A5);//Data, SCK

//delacre output pins for powering the sensor
int power = A3;
int gnd = A2;

//-------------------------------------------------------------------------------------------
void setup()
{
  Serial.begin(9600); // Open serial connection to report values to host

  pinMode(power, OUTPUT);
  pinMode(gnd, OUTPUT);

  digitalWrite(power, HIGH);
  digitalWrite(gnd, LOW);
}
//-------------------------------------------------------------------------------------------
void loop()
{
  // 定期的に実行
  if (millis() >= TIME)
  {
    TIME += 60000;  // 1分間隔で実行
    
    readSensor();  // 気温を測定し値を保存
    //printOut();  // シリアルモニタに値を表示
    checkTemp();  // 気温の判定
  }
}
//-------------------------------------------------------------------------------------------
// センサから気温を取得
void readSensor()
{
  tempC_old = tempC;  // 前の気温を保存
  tempC = sht15.readTemperatureC();  // 現在の気温を保存
}
//-------------------------------------------------------------------------------------------
// シリアルモニタに値を表示
void printOut()
{
  Serial.print(" Temp = ");
  Serial.print(tempC);
  Serial.println("C");
}
//-------------------------------------------------------------------------------------------
// 気温が下がったか判定
void checkTemp()
{
  // 前の気温と現在の気温の差を計算
  float dif = tempC_old - tempC;

  // 差が0より大きい(気温が下がった)場合
  if (dif > 0) 
  { 
    COUNT++;  // カウントを1増やす
  }
  // それ以外の(気温が下がってない)場合
  else 
  { 
    COUNT = 0;  // カウントをリセット
  }
  
  // カウントが5以上の(5分間下がり続けた)場合
  if (COUNT >= 5) 
  {
    //Serial.println(" AC ON");
    lightLED();  // エアコンをON
    COUNT = 0;  // カウントをリセット
  }
}
//-------------------------------------------------------------------------------------------
// 赤外線LEDを発光
void lightLED()
{
  // エアコンONの赤外線LED信号パターン
  unsigned int ledON[] = {3250,1700, 350,450, 400,450, 350,450, 400,400, 400,450, 400,400, 400,1250, 400,450, 350,450, 400,400, 400,450, 350,450, 400,450, 350,450, 400,400, 400,450, 400,400, 400,450, 350,1250, 400,450, 400,1250, 350,450, 400,450, 350,450, 400,1250, 400,400, 400,450, 350,450, 400,400, 400,450, 400,400, 400,1250, 400,1250, 400,400, 400,1250, 400,450, 350,450, 400,1250, 400,400, 400,450, 350,450, 400,1250, 400,1250, 400,1250, 350,450, 400,400, 400,1250, 400,450, 350,450, 400,1250, 400,400, 450,1200, 400,450, 400,1200, 450,400, 400,400, 450,1200, 400,450, 400,400, 400,400, 450,400, 400,1250, 400,1200, 450,1200, 450,400, 400,400, 450,400, 400,400, 450,350, 450,400, 450,350, 450,400, 400,400, 450,350, 450,400, 450,350, 450,400, 400,400, 450,400, 400,400, 450,350, 450,400, 450,350, 450,400, 400,400, 450,350, 450,400, 450,350, 450,400, 400,1200, 450,1200, 450,1200, 450,1200, 450,1200, 450,350, 450,400, 450};  // UNKNOWN 2701365A

  // パターン通りに赤外線LEDを点灯
  irsend.sendRaw(ledON, sizeof(ledON) / sizeof(ledON[0]), KHZ);
}
